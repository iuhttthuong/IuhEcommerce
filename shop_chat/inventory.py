from fastapi import HTTPException, APIRouter
from autogen import AssistantAgent
from loguru import logger
from .base import BaseShopAgent, ShopRequest, ChatMessageRequest
from repositories.inventory import InventoryRepository
from repositories.search import SearchRepository
from repositories.message import MessageRepository
from models.inventories import Inventory, InventoryCreate
from models.chats import ChatMessageCreate
import json
from typing import Dict, Any, Optional, List
from datetime import datetime
from sqlalchemy.orm import Session
from qdrant_client import QdrantClient
from qdrant_client.http import models as qdrant_models
from env import env
from services.search import SearchServices
import traceback

router = APIRouter(prefix="/shop/inventory", tags=["Shop Inventory"])

class InventoryAgent(BaseShopAgent):
    def __init__(self, shop_id: int = None):
        super().__init__(
            shop_id=shop_id,
            name="InventoryAgent",
            system_message="""B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp l√†m vi·ªác cho s√†n th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ IUH-Ecommerce, chuy√™n t∆∞ v·∫•n v√† h∆∞·ªõng d·∫´n cho ng∆∞·ªùi b√°n v·ªÅ qu·∫£n l√Ω t·ªìn kho.

Nhi·ªám v·ª• c·ªßa b·∫°n:
1. H∆∞·ªõng d·∫´n qu·∫£n l√Ω t·ªìn kho
2. T∆∞ v·∫•n t·ªëi ∆∞u t·ªìn kho
3. H·ªó tr·ª£ x·ª≠ l√Ω c√°c v·∫•n ƒë·ªÅ v·ªÅ t·ªìn kho
4. ƒê·ªÅ xu·∫•t c√°ch tƒÉng hi·ªáu qu·∫£ qu·∫£n l√Ω

C√°c ch·ª©c nƒÉng ch√≠nh:
1. Ki·ªÉm tra t·ªìn kho:
   - Xem s·ªë l∆∞·ª£ng t·ªìn
   - Ki·ªÉm tra tr·∫°ng th√°i
   - Theo d√µi bi·∫øn ƒë·ªông
   - C·∫£nh b√°o h·∫øt h√†ng
   - B√°o c√°o t·ªìn kho

2. Qu·∫£n l√Ω nh·∫≠p h√†ng:
   - T·∫°o ƒë∆°n nh·∫≠p h√†ng
   - Theo d√µi ƒë∆°n nh·∫≠p
   - X√°c nh·∫≠n nh·∫≠n h√†ng
   - Ki·ªÉm tra ch·∫•t l∆∞·ª£ng
   - C·∫≠p nh·∫≠t t·ªìn kho

3. Qu·∫£n l√Ω xu·∫•t h√†ng:
   - X√°c nh·∫≠n ƒë∆°n h√†ng
   - Ki·ªÉm tra t·ªìn kho
   - C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
   - Theo d√µi xu·∫•t h√†ng
   - B√°o c√°o xu·∫•t h√†ng

4. T·ªëi ∆∞u t·ªìn kho:
   - Ph√¢n t√≠ch nhu c·∫ßu
   - D·ª± b√°o t·ªìn kho
   - T·ªëi ∆∞u ƒë·∫∑t h√†ng
   - Gi·∫£m chi ph√≠ t·ªìn kho
   - TƒÉng hi·ªáu qu·∫£ qu·∫£n l√Ω

5. X·ª≠ l√Ω v·∫•n ƒë·ªÅ:
   - Th·∫•t tho√°t h√†ng
   - Sai s·ªë t·ªìn kho
   - H√†ng h·∫øt h·∫°n
   - H√†ng l·ªói
   - H·ªó tr·ª£ kh·∫©n c·∫•p

Khi tr·∫£ l·ªùi, b·∫°n c·∫ßn:
- T·∫≠p trung v√†o l·ª£i √≠ch c·ªßa ng∆∞·ªùi b√°n
- Cung c·∫•p h∆∞·ªõng d·∫´n chi ti·∫øt
- ƒê·ªÅ xu·∫•t gi·∫£i ph√°p t·ªëi ∆∞u
- S·ª≠ d·ª•ng ng√¥n ng·ªØ chuy√™n nghi·ªáp
- Cung c·∫•p v√≠ d·ª• c·ª• th·ªÉ
- Nh·∫•n m·∫°nh c√°c ƒëi·ªÉm quan tr·ªçng
- H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc khi c·∫ßn"""
        )
        self.message_repository = MessageRepository()
        self.collection_name = "inventory_management_embeddings"
        self.agent_name = "InventoryAgent"

    def _build_prompt(self, query: str, context: str) -> str:
        return (
            f"Ng∆∞·ªùi b√°n h·ªèi: {query}\n"
            f"Th√¥ng tin qu·∫£n l√Ω t·ªìn kho li√™n quan:\n{context}\n"
            "H√£y tr·∫£ l·ªùi theo c·∫•u tr√∫c sau:\n"
            "1. T√≥m t·∫Øt v·∫•n ƒë·ªÅ:\n"
            "   - M·ª•c ƒë√≠ch v√† ph·∫°m vi\n"
            "   - ƒê·ªëi t∆∞·ª£ng √°p d·ª•ng\n"
            "   - T·∫ßm quan tr·ªçng\n\n"
            "2. H∆∞·ªõng d·∫´n chi ti·∫øt:\n"
            "   - C√°c b∆∞·ªõc th·ª±c hi·ªán\n"
            "   - Y√™u c·∫ßu c·∫ßn thi·∫øt\n"
            "   - L∆∞u √Ω quan tr·ªçng\n\n"
            "3. Quy tr√¨nh x·ª≠ l√Ω:\n"
            "   - C√°c b∆∞·ªõc th·ª±c hi·ªán\n"
            "   - Th·ªùi gian x·ª≠ l√Ω\n"
            "   - T√†i li·ªáu c·∫ßn thi·∫øt\n\n"
            "4. T·ªëi ∆∞u v√† c·∫£i thi·ªán:\n"
            "   - C√°ch t·ªëi ∆∞u\n"
            "   - C·∫£i thi·ªán hi·ªáu qu·∫£\n"
            "   - TƒÉng tr·∫£i nghi·ªám\n\n"
            "5. Khuy·∫øn ngh·ªã:\n"
            "   - Gi·∫£i ph√°p t·ªëi ∆∞u\n"
            "   - C·∫£i thi·ªán quy tr√¨nh\n"
            "   - TƒÉng hi·ªáu qu·∫£\n\n"
            "Tr·∫£ l·ªùi c·∫ßn:\n"
            "- Chuy√™n nghi·ªáp v√† d·ªÖ hi·ªÉu\n"
            "- T·∫≠p trung v√†o l·ª£i √≠ch c·ªßa ng∆∞·ªùi b√°n\n"
            "- Cung c·∫•p h∆∞·ªõng d·∫´n chi ti·∫øt\n"
            "- ƒê·ªÅ xu·∫•t gi·∫£i ph√°p t·ªëi ∆∞u\n"
            "- Cung c·∫•p v√≠ d·ª• c·ª• th·ªÉ"
        )

    def _get_response_title(self, query: str) -> str:
        return f"Qu·∫£n l√Ω t·ªìn kho - {query.split()[0] if query else 'H·ªó tr·ª£'}"

    def _get_fallback_response(self) -> str:
        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin chi ti·∫øt v·ªÅ v·∫•n ƒë·ªÅ n√†y. Vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ shop ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n c·ª• th·ªÉ h∆°n."

    async def process(self, request: ShopRequest) -> Dict[str, Any]:
        # Placeholder implementation. Replace with actual logic as needed.
        return {
            "response": {
                "title": self._get_response_title(request.message),
                "content": "Inventory management processing not yet implemented.",
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            },
            "agent": self.name,
            "context": {
                "search_results": [],
                "shop_id": request.shop_id
            },
            "timestamp": datetime.now().isoformat()
        }

class Inventory:
    def __init__(self, db: Session, shop_id: int = None):
        self.db = db
        self.shop_id = shop_id
        self.agent = InventoryAgent(shop_id)
        self.inventory_repository = InventoryRepository(db)

    async def process(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """Process an inventory request."""
        try:
            shop_id = request.get('shop_id') or self.shop_id
            message = request.get('message', '').lower()
            chat_history = request.get('chat_history', '')
            
            if not shop_id:
                return {"message": "Kh√¥ng t√¨m th·∫•y th√¥ng tin shop.", "type": "error"}

            # L·∫•y th√¥ng tin t·ªìn kho
            inventory = await self.inventory_repository.get_by_product_id(str(shop_id))
            if not inventory:
                return {
                    "message": "Shop ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong t·ªìn kho.",
                    "type": "text",
                    "data": {
                        "total_items": 0,
                        "inventory": []
                    }
                }

            # Format th√¥ng tin t·ªìn kho
            inventory_info = []
            total_value = 0
            inventory_items = [inventory] if not isinstance(inventory, list) else inventory
            
            # S·∫Øp x·∫øp s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng t·ªìn kho
            sorted_items = sorted(inventory_items, key=lambda x: x.current_stock, reverse=True)
            highest_stock = sorted_items[:5]  # Top 5 s·∫£n ph·∫©m t·ªìn kho nhi·ªÅu nh·∫•t
            lowest_stock = sorted_items[-5:]  # Top 5 s·∫£n ph·∫©m t·ªìn kho √≠t nh·∫•t
            
            for item in inventory_items:
                product_info = {
                    "product_id": item.product_id,
                    "current_stock": item.current_stock,
                    "fulfillment_type": item.fulfillment_type,
                    "product_virtual_type": item.product_virtual_type
                }
                inventory_info.append(product_info)
                # T√≠nh t·ªïng gi√° tr·ªã t·ªìn kho n·∫øu c√≥ th√¥ng tin gi√°
                if hasattr(item, 'price'):
                    total_value += item.price * item.current_stock

            # T·∫°o prompt cho LLM
            prompt = f"""B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n qu·∫£n l√Ω t·ªìn kho chuy√™n nghi·ªáp.
H√£y ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c qu·∫£n l√Ω t·ªìn kho d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø.

Y√™u c·∫ßu c·ªßa ng∆∞·ªùi b√°n: "{message}"

D·ªØ li·ªáu t·ªìn kho c·ªßa shop:
1. T·ªïng quan:
   - T·ªïng s·ªë s·∫£n ph·∫©m: {len(inventory_info)}
   - T·ªïng gi√° tr·ªã t·ªìn kho: {total_value:,}ƒë

2. S·∫£n ph·∫©m t·ªìn kho nhi·ªÅu nh·∫•t:
{chr(10).join([f"- {item.product_id}: {item.current_stock} ƒë∆°n v·ªã" for item in highest_stock])}

3. S·∫£n ph·∫©m t·ªìn kho √≠t nh·∫•t:
{chr(10).join([f"- {item.product_id}: {item.current_stock} ƒë∆°n v·ªã" for item in lowest_stock])}

H√£y ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t theo c·∫•u tr√∫c sau:

1. üìä **Ph√¢n t√≠ch t√¨nh h√¨nh**:
   - ƒê√°nh gi√° t·ªïng quan v·ªÅ t·ªìn kho
   - Ph√¢n t√≠ch s·∫£n ph·∫©m t·ªìn kho nhi·ªÅu/√≠t
   - X√°c ƒë·ªãnh v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt
   - ƒê√°nh gi√° r·ªßi ro t·ªìn kho

2. üéØ **Chi·∫øn l∆∞·ª£c qu·∫£n l√Ω**:
   - ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c cho t·ª´ng nh√≥m s·∫£n ph·∫©m
   - K·∫ø ho·∫°ch c√¢n b·∫±ng t·ªìn kho
   - C√°ch th·ª©c t·ªëi ∆∞u t·ªìn kho
   - Chi·∫øn l∆∞·ª£c ƒë·∫∑t h√†ng

3. üìà **K·∫ø ho·∫°ch th·ª±c hi·ªán**:
   - C√°c b∆∞·ªõc th·ª±c hi·ªán c·ª• th·ªÉ
   - Th·ªùi gian v√† l·ªô tr√¨nh
   - Ngu·ªìn l·ª±c c·∫ßn thi·∫øt
   - Ch·ªâ s·ªë ƒë√°nh gi√° hi·ªáu qu·∫£

4. üí° **ƒê·ªÅ xu·∫•t s√°ng t·∫°o**:
   - √ù t∆∞·ªüng t·ªëi ∆∞u t·ªìn kho
   - C√°ch t·∫°o s·ª± kh√°c bi·ªát
   - Chi·∫øn l∆∞·ª£c t·∫°o gi√° tr·ªã gia tƒÉng
   - C∆° h·ªôi ph√°t tri·ªÉn m·ªõi

5. ‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng**:
   - C√°c r·ªßi ro c·∫ßn tr√°nh
   - ƒêi·ªÉm c·∫ßn l∆∞u √Ω khi th·ª±c hi·ªán
   - C√°ch x·ª≠ l√Ω t√¨nh hu·ªëng ƒë·∫∑c bi·ªát
   - K·∫ø ho·∫°ch d·ª± ph√≤ng

Tr·∫£ l·ªùi c·∫ßn:
- Chuy√™n nghi·ªáp v√† chi ti·∫øt
- T·∫≠p trung v√†o gi·∫£i ph√°p t·ªëi ∆∞u
- ƒê·ªÅ xu·∫•t gi·∫£i ph√°p kh·∫£ thi v√† s√°ng t·∫°o
- Cung c·∫•p v√≠ d·ª• c·ª• th·ªÉ
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- ƒê·ªãnh d·∫°ng markdown r√µ r√†ng
- T·∫≠p trung v√†o l·ª£i √≠ch c·ªßa ng∆∞·ªùi b√°n"""

            # T·∫°o response s·ª≠ d·ª•ng assistant
            response = await self.agent.assistant.a_generate_reply(
                messages=[{"role": "user", "content": prompt}]
            )

            return {
                "message": response if response else "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i sau.",
                "type": "text",
                "data": {
                    "total_items": len(inventory_info),
                    "total_value": total_value,
                    "inventory": inventory_info,
                    "highest_stock": [{"product_id": item.product_id, "current_stock": item.current_stock} for item in highest_stock],
                    "lowest_stock": [{"product_id": item.product_id, "current_stock": item.current_stock} for item in lowest_stock]
                }
            }

        except Exception as e:
            logger.error(f"Error processing inventory request: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return {
                "message": "ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.",
                "type": "error",
                "error": str(e)
            }

    async def process_request(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """Alias for process method to maintain backward compatibility"""
        return await self.process(request)

@router.post("/query")
async def query_inventory(request: ChatMessageRequest):
    try:
        inventory = Inventory(Session())
        # Convert to ShopRequest format
        shop_request = ShopRequest(
            message=request.content,
            chat_id=request.chat_id,
            shop_id=request.sender_id if request.sender_type == "shop" else None,
            user_id=request.sender_id if request.sender_type == "user" else None,
            context=request.message_metadata if request.message_metadata else {},
            entities={},
            agent_messages=[],
            filters={}
        )
        response = await inventory.process(shop_request.dict())
        return response
    except Exception as e:
        logger.error(f"Error in query_inventory: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/")
async def list_inventory():
    """List all inventory items in a shop"""
    return {"message": "List inventory endpoint"} 